
import React, { useState } from 'react';
import { ChevronRight, ChevronLeft, Sparkles, Send } from 'lucide-react';
import { StartupLead } from '@/entities/StartupLead';

import ProgressBar from '../components/form/ProgressBar';
import StepOne from '../components/form/StepOne';
import StepTwo from '../components/form/StepTwo';
import StepThree from '../components/form/StepThree';
import StepFour from '../components/form/StepFour';

export default function StartupForm() {
  const [currentStep, setCurrentStep] = useState(1);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    fullName: '',
    workEmail: '',
    phoneNumber: '',
    linkedinUrl: '', // New field
    startupName: '',
    websiteUrl: '',
    startupRevenue: '', // New field, replaces startupStage
    industry: '',
    location: '',
    teamSize: '',
    needs: [],
    description: '',
    hasRaisedFunding: '',
    previousFundingAmount: '', // Renamed from fundingDetails
    currentlyRaising: '',
    raisingAmount: '',
    hearAboutUs: '',
    privacyConsent: false,
    updatesConsent: false
  });

  const [errors, setErrors] = useState({});

  const validateEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const validateUrl = (url) => {
    try {
      new URL(url);
      return true;
    } catch (e) {
      return false;
    }
  };

  const validateStep = (step) => {
    const newErrors = {};

    switch (step) {
      case 1:
        if (!formData.fullName.trim()) newErrors.fullName = 'Full name is required';
        if (!formData.workEmail.trim()) {
          newErrors.workEmail = 'Work email is required';
        } else if (!validateEmail(formData.workEmail)) {
          newErrors.workEmail = 'Please enter a valid email address';
        }
        if (!formData.linkedinUrl.trim()) { // New validation
          newErrors.linkedinUrl = 'LinkedIn URL is required';
        } else if (!validateUrl(formData.linkedinUrl)) { // New validation
          newErrors.linkedinUrl = 'Please enter a valid URL';
        }
        break;

      case 2:
        if (!formData.startupName.trim()) newErrors.startupName = 'Startup name is required';
        if (!formData.startupRevenue) newErrors.startupRevenue = 'Startup revenue is required'; // Updated validation
        if (!formData.industry) newErrors.industry = 'Industry is required';
        if (!formData.location.trim()) newErrors.location = 'Location is required';
        break;

      case 3:
        if (!formData.needs || formData.needs.length === 0) newErrors.needs = 'Please select at least one need';
        break;

      case 4:
        if (!formData.hasRaisedFunding) newErrors.hasRaisedFunding = 'Please select an option';
        if (!formData.currentlyRaising) newErrors.currentlyRaising = 'Please select an option';
        if (!formData.privacyConsent) newErrors.privacyConsent = 'Privacy policy consent is required';
        break;
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: undefined
      }));
    }
  };

  const nextStep = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, 4));
    }
  };

  const prevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1));
  };

  const handleSubmit = async () => {
    if (!validateStep(4)) return;

    setIsSubmitting(true);
    try {
      await StartupLead.create(formData);
      alert('ðŸŽ‰ Thank you! Your startup information has been submitted successfully. We\'ll be in touch soon!');
      // Reset form
      setFormData({
        fullName: '',
        workEmail: '',
        phoneNumber: '',
        linkedinUrl: '', // Reset new field
        startupName: '',
        websiteUrl: '',
        startupRevenue: '', // Reset new field
        industry: '',
        location: '',
        teamSize: '',
        needs: [],
        description: '',
        hasRaisedFunding: '',
        previousFundingAmount: '', // Reset renamed field
        currentlyRaising: '',
        raisingAmount: '',
        hearAboutUs: '',
        privacyConsent: false,
        updatesConsent: false
      });
      setCurrentStep(1);
    } catch (error) {
      alert('Something went wrong. Please try again.');
    }
    setIsSubmitting(false);
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return <StepOne formData={formData} errors={errors} onChange={handleInputChange} />;
      case 2:
        return <StepTwo formData={formData} errors={errors} onChange={handleInputChange} />;
      case 3:
        return <StepThree formData={formData} errors={errors} onChange={handleInputChange} />;
      case 4:
        return <StepFour formData={formData} errors={errors} onChange={handleInputChange} />;
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-[#F5FFFF] py-8 px-4">
      <div className="max-w-3xl mx-auto">
        <div className="bg-white rounded-2xl shadow-xl overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-[#0DA6A6] to-[#0DA6A6]/80 px-8 py-12 text-center">
            {/* Logo */}
            <img 
              src="https://qtrypzzcjebvfcihiynt.supabase.co/storage/v1/object/public/base44-prod/public/344704fe6_ChopwhitelogofinalH.png" 
              alt="Chop Finance Logo"
              className="h-12 w-auto mx-auto mb-6"
            />
            
            <h1 className="text-3xl md:text-4xl font-bold text-white mb-3">
              Join Our Startup Community
            </h1>
            <p className="text-[#F5FFFF] text-lg opacity-90 max-w-2xl mx-auto">
              Connect with funding opportunities, expert mentorship, and strategic partnerships to accelerate your startup's growth
            </p>
          </div>

          {/* Form Content */}
          <div className="px-8 py-8">
            <ProgressBar currentStep={currentStep} />
            
            <div className="mb-8">
              {renderStepContent()}
            </div>

            {/* Navigation */}
            <div className="flex justify-between items-center pt-6 border-t border-gray-100">
              <button
                onClick={prevStep}
                disabled={currentStep === 1}
                className={`flex items-center space-x-2 px-6 py-3 rounded-xl font-medium transition-all duration-200 ${
                  currentStep === 1
                    ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200 active:scale-95'
                }`}
              >
                <ChevronLeft size={18} />
                <span>Previous</span>
              </button>

              <div className="flex space-x-4">
                {currentStep < 4 && (
                  <button
                    onClick={nextStep}
                    className="flex items-center space-x-2 bg-[#0DA6A6] text-white px-8 py-3 rounded-xl font-medium hover:bg-[#0DA6A6]/90 transition-all duration-200 active:scale-95 shadow-lg"
                  >
                    <span>Next Step</span>
                    <ChevronRight size={18} />
                  </button>
                )}
                
                {currentStep === 4 && (
                  <button
                    onClick={handleSubmit}
                    disabled={isSubmitting}
                    className="flex items-center space-x-2 bg-[#0DA6A6] text-white px-8 py-3 rounded-xl font-medium hover:bg-[#0DA6A6]/90 transition-all duration-200 active:scale-95 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white" />
                        <span>Submitting...</span>
                      </>
                    ) : (
                      <>
                        <Send size={18} />
                        <span>Submit Your Startup</span>
                      </>
                    )}
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
